// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
